***** Análisis de una sesión SIP

Se ha capturado una sesión SIP con Ekiga (archivo sip.cap.gz), que se puede abrir con Wireshark. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

  *2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
    * ¿Cuántos paquetes componen la captura?
      954
    * ¿Cuánto tiempo dura la captura?
      56 segundos aproximadamente
    * ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
      La captura se ha realizado a través de la maquina 192.168.1.34, por descarte y porque es la que siempre se repite
      Es una IP privada ya que esta ente 192.168.0.0 – 192.168.255.255

  *3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
    * ¿Cuál de los dos es mayor? ¿Tiene esto sentido si estamos hablando de una aplicación que transmite en tiempo real?
      Es mayor el protocolo UDP (96.2%) que TCP (2.1%).
      Tiene sentido debido a que en transmisiones en tiempo real se utiliza UDP ya que no envia asentimientos ni reenvia paquetes perdidos que no nos harian falta ya en tiempo real.
    * ¿Qué otros protocolos podemos ver en la jerarquía de protocolos? ¿Cuales crees que son señal y cuales ruido?
      Protocolo Ethernet, IPv4, SIP, RTP, RTCP, DNS, HTTP, ICMP, ARP y H.261
      Nos interesa será los protocolos SIP, RTP, H.261, lo demás podriamos considerarlo ruido


  *4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
    * Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
      En el intervalo 7s-8s se han enviado 6 paquetes, en el 14s-15s, 3 paquetes, en el 16s-17s, paquetes, en el 38s-39s 4 paquetes, en el 39s-40s,4 paquetes y en el 55s-56s 4 paquetes
    * Y los paquetes con RTP, ¿cuándo se envían?
      39 paquetes en el intervalo 17s-18s, 51 paquetes en el 18s-19s, 46 paquetes en el 19s-20s,  20 paquetes en el 20s-21s, 30 paquetes en el 21s-22s, 60 paquetes en el 23s-24s, 70 paquetes en el 24s-25s, 90 paquetes en el 25s-26s, 49 paquetes en el 27s-28s,
      40 paquetes en el  28s-29s, 67 paquetes en el 29s-30s, 20 paquetes en el 30s-31s, 10 paquetes en el 31s-32s, 30 paquetes en el 33s-34s, 20 paquetes en el 34s-35s, 30 paquetes en el 34s-36s, 10 paquetes en el 37s-38s y 5 paquetes en el 38s-39s.

  [Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

  *5. Analiza las dos primeras tramas de la captura.
    * ¿Qué servicio es el utilizado en estas tramas?
      DNS
    * ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
      80.58.61.250
    * ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
      86.64.162.35

  *6. A continuación, hay más de una docena de tramas TCP/HTTP.
    * ¿Podrías decir la URL que se está pidiendo?
      Lo vemos en el primer paquete HTTP con GET se pide: http://ekiga.net/ip/
    * ¿Qué user agent (UA) la está pidiendo?
      Ekiga
    * ¿Qué devuelve el servidor?
      200 OK en el paquete 10 y contiene la direccion ip 83.36.48.212 (text/html)
    * Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
      Nos pone 212.128.255.37, que es la ip del ordenador (37) de los labs

  *7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
    * ¿Por qué se hace uso de este protocolo?
      Porque permite ver las direcciones publicas, el tipo de NAT y el puerto Internet asociado por el NAT.
    * ¿Podrías decir si estamos tras un NAT o no?
      Sí porque estamos utilizando STUN

  *8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
    * ¿Qué dirección IP tiene el servidor Registrar?
       IP 86.64.162.35
    * ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
      5060 el puerto por defecto de SIP
    * ¿Qué método SIP utiliza el UA para registrarse?
      Utiliza Method: REGISTER
    * Además de REGISTER, ¿podrías decir qué instrucciones SIP entiende el UA?
      INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE

  [Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

  *9. Fijémonos en las tramas siguientes a la número 46:
    * ¿Se registra con éxito en el primer intento?
      NO porque no esta autorizado
    * ¿Cómo sabemos si el registro se ha realizado correctamente o no?
      Cuando nos manda un 200 ok en la respuesta
    * ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
      El segudo pesa mas porque lleva en la cabecera la autorizacion
    * ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
      3600 segundos

  *10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
    * ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
      Sí (From: "Gregorio Robles" <sip:grex@ekiga.net>)
    * ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
      Esta en SIP y contiene la descripcion de la sesion
    * ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
      No, porque nos manda un 407 diciendo que necesitamos autorizacion
    * ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
      Se diferencia en el tamaño ya que es mayor porque contiene la autorizacion

  *11. Una vez conectado, estudia el intercambio de tramas.
    * ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
      H.261 (compresión de vídeo), RTP (permite la transmisión de información en tiempo real) y RTCP (envío de datos de control
      y datos de mediciones realizadas durante la transmisión)
    * ¿Cuál es el tamaño de paquete de los mismos?
      RTP 214 bytes, RTCP 43 bytes y H.261 varia entre 200-1080 bytes
    * ¿Se utilizan bits de padding?
      No se utilizan ya que la cabecera Padding esta en False
    * ¿Cuál es la periodicidad de los paquetes (en origen; nota que la captura es en destino)?
      En G.711 se mandan 8000 muestras. 50 paquetes por segundo, por tanto 20 ms por cada paquete.
    * ¿Cuántos bits/segundo se envían?
      G.711 tiene un flujo de datos de 64 kbit/s


  [Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

  *12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
    * ¿Cuántos flujos hay? ¿por qué?
      2, uno de audio (puerto 510) y otro de video (puerto 5014)
    * ¿Cuántos paquetes se pierden?
      No se pierde ninguno
    * ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
      Es la latencia, el tiempo que tarda en enviarse un paquete. En audio 1290.444 ms y video 1290.479
    * ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Crees que estamos ante una conversación de calidad?
      Audio(G.711) max jitter: 119.635, mean jitter:42.5
      Video(H.261) max jitter: 183.096, mean jitter:153.240
      El jitter es la variacion de la latencia.
      Diria que no ya que no se mandan periodicamente


  *13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
    * ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
      0
    * ¿Podemos saber si éste es el primer paquete que nos han enviado?
      Asumiendo que el bit de marca lo han utilizado para el primer paquete, podemos decir que el 113 es el primero
    * Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
      Hasta el paquete 247
    * ¿A qué se debe el cambio tan brusco del jitter?
      Porque la delta aumenta mucho, entonces varia la latencia y por tanto el jitter.
    * ¿Es comparable el cambio en el valor de jitter con el del delta? ¿Cual es más grande?
      Es mas grande el cambio del valor de la delta, ya que la formula del jitter esta diseñada para que no sea tan brusco

  *14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Play Streams.
    * ¿Cuánto dura la conversación?
      24 segundos
    * ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
      Los de video: 0x43306582, Los de audio: 0xBF4AFD37
      Hay varios, un SSRC para cada flujo, no hay CSRCs ya que no estan mezclados los flujos


  *15. Identifica la trama donde se finaliza la conversación.
    * ¿Qué método SIP se utiliza?
      BYE
    * ¿En qué trama(s)?
      En las tramas 924, 925, 927 y 933.
    * ¿Por qué crees que se envía varias veces?
      Porque como en UDP no se reenvian los paquetes, para asegurar enviamos varios
  * Finalmente, se cierra la aplicación de VozIP.
    * ¿Por qué aparece una instrucción SIP del tipo REGISTER?
      Porque quiere borrarse del servidor entonces manda un register con expires 0
    * ¿En qué trama sucede esto?
      En la trama 950 (sin autorizacion) y en la 952 (con autorizacion)
    * ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
      En el valor del expires
  [Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

***** Captura de una sesión SIP

  * Dirígete a la web de IPTel (https://serweb.iptel.org/user/reg/index.php) con el navegador y créate una cuenta SIP.  Recibirás un correo electrónico de confirmación en la dirección que has indicado al registrarte.

  * Lanza Ekiga, y configúralo con los datos de la cuenta que te acabas de crear. Para ello, puedes ir al menú ``Editar'' y seleccionar ``Cuentas''. Tendrás que rellenar los campos de manera similar a lo que se puede ver en la imagen a continuación (recuerda poner tu nombre de usuario en lugar de ``grex''). Comprueba que estás conectado (En la barra al final de la ventana podrás ver ``Registrado''). Al terminar, cierra completamente Ekiga.
(en el guión en PDF en este punto podrás ver una gráfica)

  * Captura una sesión SIP de una conversación con el número SIP sip:music@sip.iptel.org. Recuerda que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso.

  * Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
    * ¿Se utilizan DNS y STUN? ¿Por qué?
    * ¿Son diferentes el registro y la descripción de la sesión?

  * Identifica las diferencias existentes entre esta conversación y la conversación anterior:
    * ¿Cuántos flujos tenemos?
    * ¿Cuál es su periodicidad?
    * ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
    * ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
    * ¿Sabrías decir qué tipo de servicio ofrece sip:music@iptel.org?

  [Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

  * Filtra por los paquetes SIP de la captura y guarda *únicamente* los paquetes SIP como p5.pcapng. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás añadirlo al repositorio.

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitLab]
